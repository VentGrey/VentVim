priority -50

# Many of the snippets here use a global option called
# "g:ultisnips_java_brace_style" which, if set to "nl" will put a newline
# before '{' braces.

global !p

def nl(snip):
	if snip.opt("g:ultisnips_java_brace_style", "") == "nl":
		snip += ""
	else:
		snip.rv += " "

def getArgs(group):
	import re
	word = re.compile('[a-zA-Z><.]+ \w+')
	return [i.split(" ") for i in word.findall(group) ]

def camel(word):
	if not word: return ''
	return word[0].upper() + word[1:]

def mixedCase(word):
	if not word: return ''
	return word[0].lower() + word[1:]

endglobal

snippet sleep "try sleep catch" b
try`!p nl(snip)`{
	Thread.sleep(${1:1000});
}`!p nl(snip)`catch (InterruptedException e)`!p nl(snip)`{
	e.printStackTrace();
}
endsnippet

snippet /i|n/ "new primitive or int" br
${1:int} ${2:i} = ${3:1};
$0
endsnippet

snippet /o|v/ "new Object or variable" br
${1:Object} ${2:var} = new $1(${3});
endsnippet

snippet f "field" b
${1:private} ${2:String} ${3:`!p snip.rv = t[2].lower()`};
endsnippet

snippet ab "abstract" b
abstract $0
endsnippet

snippet as "assert" b
assert ${1:test}${2/(.+)/(?1: \: ")/}${2:Failure message}${2/(.+)/(?1:")/};
endsnippet

snippet at "assert true" b
assertTrue(${1:actual});
endsnippet

snippet af "assert false" b
assertFalse(${1:actual});
endsnippet

snippet ae "assert equals" b
assertEquals(${1:expected}, ${2:actual});
endsnippet

snippet br "break"
break;

endsnippet

snippet cs "case" b
case $1:
	$2
$0
endsnippet

snippet ca "catch" b
catch (${1:Exception} ${2:e})`!p nl(snip)`{
	$0
}
endsnippet

snippet cle "class extends" b
package ${1:com.jean.www$2};

/**
 * This class "$3" created on `date +'%Y-%m-%d'`.
 *
 * @version 1.0
 * @author Jinghui Hu <hujinghui@buaa.edu.cn>
 */
public class ${3:`!p snip.rv = snip.basename or "untitled"`}
	${4:extends ${5:TestCase}} ${6:implements ${7:Serializable}}`!p nl(snip)`{
	$0
}
endsnippet

snippet cla "class with constructor, fields, setter and getters" b
package ${1:com.jean.www$2};

/**
 * This class "$3" created on `date +'%Y-%m-%d'`.
 *
 * @version 1.0
 * @author Jinghui Hu <hujinghui@buaa.edu.cn>
 */
public class ${3:`!p snip.rv = snip.basename or "untitled"`}`!p nl(snip)`{
`!p
args = getArgs(t[4])
if len(args) == 0: snip.rv = ""
for i in args:
	snip.rv += "\n\
	private " + i[0] + " " + i[1]+ ";"
if len(args) > 0:
	snip.rv += "\n"`
	public $3($4)
	{`!p
args = getArgs(t[4])
for i in args:
	snip.rv += "\n\
	\
	this." + i[1] + " = " + i[1] + ";"
if len(args) == 0:
	snip.rv += "\n"`
	}$0
`!p
args = getArgs(t[4])
if len(args) == 0: snip.rv = ""
for i in args:
	snip.rv += "\n\
	public void set" + camel(i[1]) + "(" + i[0] + " " + i[1] + ")\n\
	{\n" + "\
	\
	this." + i[1] + " = " + i[1] + ";\n\
	}\n"

	snip.rv += "\n\
	public " + i[0] + " get" + camel(i[1]) + "()\n\
	{\n" + "\
	\
	return this." + i[1] + ";\n\
	}\n"
`
}
endsnippet

snippet clf "class with constructor, with field names" b
package ${1:com.jean.www$2};

/**
 * This class "$3" created on `date +'%Y-%m-%d'`.
 *
 * @version 1.0
 * @author Jinghui Hu <hujinghui@buaa.edu.cn>
 */
public class ${3:`!p snip.rv = snip.basename or "untitled"`}`!p nl(snip)`{
`!p
args = getArgs(t[4])
for i in args:
	snip.rv += "\n\
	private " + i[0] + " " + i[1]+ ";"
if len(args) > 0:
	snip.rv += "\n"`
	public $3($4)
	{`!p
args = getArgs(t[4])
for i in args:
	snip.rv += "\n\
	\
	this.%s = %s;" % (i[1], i[1])
if len(args) == 0:
	snip.rv += "\n"`
	}

	$0

}
endsnippet

snippet clc "class and constructor" b
package ${1:com.jean.www$2};

/**
 * This class "$3" created on `date +'%Y-%m-%d'`.
 *
 * @version 1.0
 * @author Jinghui Hu <hujinghui@buaa.edu.cn>
 */
public class ${3:`!p snip.rv = snip.basename or "untitled"`}`!p nl(snip)`{

	public $3($4)
	{
		$0
	}

}
endsnippet

snippet ch "class header" b
/**
 * This class "`!p snip.rv = snip.basename or "untitled"`" created on `date +'%Y-%m-%d'`.
 *
 * @version 1.0
 * @author Jinghui Hu <hujinghui@buaa.edu.cn>
 */
endsnippet

snippet cl "class" b
/**
 * This class "`!p snip.rv = snip.basename or "untitled"`" created on `date +'%Y-%m-%d'`.
 *
 * @version 1.0
 * @author Jinghui Hu <hujinghui@buaa.edu.cn>
 */
public class ${1:`!p snip.rv = snip.basename or "untitled"`}`!p nl(snip)`{
	$0
}
endsnippet

snippet cos "constant string" b
public static final String ${1:var} = "$2";$0
endsnippet

snippet co "constant" b
public static final ${1:String} ${2:var} = $3;$0
endsnippet

snippet de "default" b
default:
	$0
endsnippet

snippet elif "else if"
else if ($1)`!p nl(snip)`{
	${0:${VISUAL}}
}
endsnippet

snippet /el(se)?/ "else" r
else`!p nl(snip)`{
	${0:${VISUAL}}
}
endsnippet

snippet fi "final" b
final $0
endsnippet

snippet fore "for (each)" b
for ($1 : $2)`!p nl(snip)`{
	${0:${VISUAL}}
}
endsnippet

snippet fori "for" b
for (int ${1:i} = 0; $1 < ${2:10}; $1++)`!p nl(snip)`{
	${0:${VISUAL}}
}
endsnippet

snippet for "for" b
for ($1; $2; $3)`!p nl(snip)`{
	${0:${VISUAL}}
}
endsnippet

snippet if "if" b
if ($1)`!p nl(snip)`{
	${0:${VISUAL}}
}
endsnippet

snippet imt "import junit_framework_TestCase;"  b
import junit.framework.TestCase;
$0
endsnippet

snippet im "import"  b
import ${1:java}.${2:util}.$0;
endsnippet

snippet in "interface" b
interface ${1:`!p snip.rv = snip.basename or "untitled"`} ${2:extends ${3:Parent}}`!p nl(snip)`{
	$0
}
endsnippet

snippet cc "constructor call or setter body"
this.${1:var} = $1;
endsnippet

snippet list "Collections List" b
List<${1:String}> ${2:list} = new ${3:Array}List<$1>();
endsnippet

snippet map "Collections Map" b
Map<${1:String}, ${2:String}> ${3:map} = new ${4:Hash}Map<$1, $2>();
endsnippet

snippet set "Collections Set" b
Set<${1:String}> ${2:set} = new ${3:Hash}Set<$1>();
endsnippet

snippet /Str?|str/ "String" br
String $0
endsnippet

snippet cn "Constructor" b
public `!p snip.rv = snip.basename or "untitled"`(${1:})`!p nl(snip)`{
	$0
}
endsnippet

snippet cn "constructor, \w fields + assigments" b
`!p
args = getArgs(t[1])
for i in args:
	snip.rv += "\n\
	private " + i[0] + " " + i[1]+ ";"
if len(args) > 0:
	snip.rv += "\n"`
public `!p snip.rv = snip.basename or "unknown"`($1)`!p nl(snip)`{`!p
args = getArgs(t[1])
for i in args:
	snip.rv += "\n\
	\
	this.%s = %s;" % (i[1], i[1])
if len(args) == 0:
	snip.rv += "\n"`
}
endsnippet

snippet j.b "java_beans_" i
java.beans.
endsnippet

snippet j.i "java_io" i
java.io.
endsnippet

snippet j.m "java_math" i
java.math.
endsnippet

snippet j.n "java_net_" i
java.net.
endsnippet

snippet j.u "java_util_"  i
java.util.
endsnippet

snippet c.j "com_jean_www"  i
com.jean.www.
endsnippet

snippet main "method (main)" b
public static void main(String[] args)`!p nl(snip)`{
	${0:${VISUAL}}
}
endsnippet

snippet try "try/catch/finally" b
try`!p nl(snip)`{
	${6:${VISUAL}}
}`!p nl(snip)`catch(${1:Exception} ${2:e})`!p nl(snip)`{
	${3:$2.printStackTrace();}
}`!p nl(snip)`finally`!p nl(snip)`{
	${5:${4:stream}.close();}
}
endsnippet

snippet tryf "try/finally" b
try`!p nl(snip)`{
	${3:${VISUAL}}
}`!p nl(snip)`finally`!p nl(snip)`{
	${2:${1:stream}.close();}
}
endsnippet

snippet tryc "try/catch" b
try`!p nl(snip)`{
	${4:${VISUAL}}
}`!p nl(snip)`catch(${1:Exception} ${2:e})`!p nl(snip)`{
	${3:$2.printStackTrace();}
}
endsnippet

snippet m  "method" b
${1:private} ${2:void} ${3:method}(${4})`!p nl(snip)`{
	${0:// TODO: coding...}
}
endsnippet

snippet mt "method throws" b
${1:private} ${2:void} ${3:method}(${4}) ${5:throws $6}`!p nl(snip)`{
	$0
}
endsnippet

snippet md "Method With javadoc" b
/**
 * ${7:Short Description}`!p
for i in getArgs(t[4]):
	snip.rv += "\n\
	 * @param " + i[1] + " usage..."`
 *`!p
if "throws" in t[5]:
	snip.rv = "\n\
	 * @throws " + t[6]
else:
	snip.rv = ""` `!p
if not "void" in t[2]:
	snip.rv = "\n\
	 * @return object"
else:
	snip.rv = ""`
 */
${1:public} ${2:void} ${3:method}($4) ${5:throws ${6:IOException}}`!p nl(snip)`{
	${0:// TODO: coding...}
}
endsnippet

snippet /get(ter)?/ "getter" br
public ${1:String} get${2:Name}()`!p nl(snip)`{
	return this.`!p snip.rv = mixedCase(t[2])`;
}
endsnippet

snippet /set(ter)?/ "setter" br
public void set${1:Name}(${2:String} `!p snip.rv = mixedCase(t[1])`)`!p nl(snip)`{
	this.`!p snip.rv = mixedCase(t[1])` = `!p snip.rv = mixedCase(t[1])`;
}
endsnippet

snippet /se?tge?t|ge?tse?t|gs/ "setter and getter" br
public void set${1:Name}(${2:String} `!p snip.rv = mixedCase(t[1])`)`!p nl(snip)`{
	this.`!p snip.rv = mixedCase(t[1])` = `!p snip.rv = mixedCase(t[1])`;
}

public $2 get$1()`!p nl(snip)`{
	return this.`!p snip.rv = mixedCase(t[1])`;
}
endsnippet

snippet pa "package" b
package $0
endsnippet

snippet p "print" b
System.out.print(${1:${VISUAL}});$0
endsnippet

snippet pl "println"  b
System.out.println(${1:${VISUAL}});$0
endsnippet

snippet ld "log4j debug"  b
Log.out.debug(${1:${VISUAL}});$0
endsnippet

snippet li "log4j info"  b
Log.out.info(${1:${VISUAL}});$0
endsnippet

snippet pr "private" b
private $0
endsnippet

snippet po "protected" b
protected $0
endsnippet

snippet pu "public" b
public $0
endsnippet

snippet re "return" b
return $0
endsnippet

snippet st "static"
static $0
endsnippet

snippet sw "switch" b
switch ($1)`!p nl(snip)`{
	case $2: $0
}
endsnippet

snippet sy "synchronized"
synchronized $0
endsnippet

snippet tc "test case"
package ${1:com.jean.www$2};

import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;

/**
 * This test case "$3" created on `date +'%Y-%m-%d'`.
 *
 * @version 1.0
 * @author Jinghui Hu <hujinghui@buaa.edu.cn>
 */
public class ${3:`!p snip.rv = snip.basename or "untitled"`}
	extends TestCase
{

    /**
     * Create the test case.
     *
     * @param testName name of the test case
     */
	public $3(String testName)
	{
		super(testName);
	}

    /**
     * @return the suite of tests being tested
     */
	public static Test suite()
	{
		return new TestSuite($3.class);
	}

    /**
     * Common setup works. initializing variables as so on...
     */
	protected void setUp()
	{
		${5:// TODO: setup works.}
	}

	public void test${4:App}()
	{
		${6:// TODO: test works.}
	}

}
endsnippet

snippet t "test" b
public void test${1:Name}()`!p nl(snip)`{
	$0
}
endsnippet

snippet tt "test throws" b
public void test${1:Name}() ${2:throws Exception}`!p nl(snip)`{
	$0
}
endsnippet

snippet th "throw" b
throw new $0
endsnippet

snippet wh "while" b
while ($1)`!p nl(snip)`{
	${0:${VISUAL}}
}
endsnippet

# vim:ft=snippets:
